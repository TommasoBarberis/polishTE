#!/bin/bash

# Author: Tommaso Barberis
# Date: 27/04/2022
# Description: extension of consensi of transposable elements
# TODOs:
#   - singularity container

# dependancies:
# - mafft
# - blastn
# - samtools
# - awk
# - bedtools
# - CIAlign
# - python3
#   - Levenshtein
# - R

# sources:
# https://github.com/annaprotasio/TE_ManAnnot
# https://github.com/clemgoub/TE-Aid

# for more information:
# https://github.com/TommasoBarberis/polishTE


function usage()
{
   cat << DOC

    developer: tommasobarberis98@gmail.com
    for more information: https://github.com/TommasoBarberis/polishTE

   #######################################

   polishTE is a tool to refine and extend transposable elements. It inputs a TE consenus
   sequence and a reference genome at the fasta format.

   Full Documentation: link repo github
                                      
   #######################################

   Usage: polishTE [-i|--input <seq_TE.fasta>] [-g|--genome <genome.fasta>] [options]

   mendatory arguments:
    
    -i, --input                     TE consensus (fasta file)
    -g, --genome                    Reference genome (fasta file)

   optional arguments:
    
    -h, --help                      Show this help message and exit
    -t, --threads                   Number of threads, (default: 1)
    -o, --output                    Output directory (default: directory where the program is launched)
    -min, --min_length              Minmum length for instances that will be recovered in the genome 
                                    (default: 0). If the option is set to 0 (as default), the program
                                    will use the half of the length of the TE as minimum length, else
                                    it will use the provided value
    -f, --flank                     Number of bases to extract at the flanking regions of the hits 
                                    (default: 100)       
    -e, --evalue                    e-value for blastn (default: 1e-20)
    -l, --limit                     Maximum number of hits to take in account for the alignement 
                                    (default: 100). If the number of hits is less then this limit, the
                                    subsample is skipped.
    -k, --keep_longest              Keep the k% longest sequences among blast hits (default: 0.25)                                    
    -ins, --max_ins_size            Remove insertion if its size is less than <ins> (default:200, 
                                    range:[200-1000])
    -m, --mode                      Speed mode, fast and less accurate (max 10 iterations) or slow and 
                                    more accurate (max 100 iterations) (default: fast)
    -c, --min_cov                   Minimum coverage on boundaries to perform the extension (default: 3)

    #######################################

    Dependancies:
        - mafft
        - blastn
        - samtools
        - awk
        - bedtools
        - CIAlign
        - python3
            - Levenshtein
        - R


DOC
} 

# if no parameter given, output help and qui
if [[ $# -eq 0 ]] ; then
    usage
    echo '   ##################################'
    echo '   ERROR! No mendatory argument given'
    echo '   ##################################'
    exit 0
fi

# defaults parameters
THREADS=1
OUTPUTDIR=./
MIN_LENGTH=0
FLANK=1000
EVALUE=1e-20
LIMIT=100
KEEP=0.25
INS_MAX_SIZE=200
MIN_COVERAGE=2
MODE="fast"
FACTOR=1

# parse of parameteres
ARGS=""
re='^[0-9]+$'

while [[ $# -gt 0 ]]; do
	case $1 in
		-i|--input)
            FASTAFILE=$2
            shift 2
            ;;
		-g|--genome)
			GENOME=$2
			shift 2
			;;
        -h | --help)
	        usage
	        exit 1
	        ;;
        -t|--threads)
			THREADS=$2            
            if ! [[ $THREADS =~ $re ]] ; then
                echo "  ERROR! Invalid value for the number of threads." 
                exit 1
            fi
			shift 2
			;;
        -o|--output)
			OUTPUTDIR=$2
            shift 2
			;;
        -min|--min_length)
            MIN_LENGTH=$2
            if ! [[ $MIN_LENGTH =~ $re ]] ; then
                usage
                echo "  ERROR! Invalid value for the minimum length of the instances." 
                exit 1
            fi
            shift 2
            ;;
        -f|--flank)
            FLANK=$2
            if ! [[ $MIN_LENGTH =~ $re ]] ; then
                usage
                echo "  ERROR! Invalid value for the number of bases in the flanking regions." 
                exit 1
            fi
            shift 2
            ;;
        -e|--evalue)
            EVALUE=$2
            shift 2
            ;;
        -l|--limit)
            LIMIT=$2
            if ! [[ $LIMIT =~ $re ]] ; then
                usage
                echo "  ERROR! Invalid value for the maximum number of hits." 
                exit 1
            fi
            shift 2
            ;;
        -k|--keep_longest)
            KEEP=$2
            if (( $(echo "$KEEP > 1" |bc -l) )) || (( $(echo "$KEEP < 0" |bc -l) )); then
                usage
                echo "  ERROR! Invalid value for the pourcentage of longest hits to keep." 
                exit 1
            fi
            shift 2
            ;;
        -ins|--max_ins_size)
            INS_MAX_SIZE=$2
            if (( $(echo "$INS_MAX_SIZE > 1000" |bc -l) )) || (( $(echo "$INS_MAX_SIZE < 200" |bc -l) )); then
                usage
                echo "  ERROR! Invalid value for the maximum insertion size." 
                exit 1
            fi
            shift 2
            ;;
        -m|--mode)
            MODE=$2
            if [ ! $MODE = "fast" ] && [ ! $MODE = "slow"]; then
                usage
                echo "  ERROR! Invalid value for the mode parameter"
                exit 1
            fi
            shift 2
            ;;
        -c|--min_cov)
            MIN_COVERAGE=$2
            if ! [[ $MIN_COVERAGE =~ $re ]] ; then
                usage
                echo "  ERROR! Invalid value for the minimum coverage on the boundaries." 
                exit 1
            fi
            shift 2
            ;;
		-*|--*)
			echo "Unknown option $1"
			exit 1
			;;
		*)
			ARGS+=("$1")
			shift
			;;
	esac
done


#####################################################

# check for mandatory arguments
FASTAFILE=$(realpath $FASTAFILE 2> /dev/null) || {
    usage; 
    echo "  ERROR! No TE fasta file found.";
    exit 1; 
}
GENOME=$(realpath $GENOME 2> /dev/null) || { 
    usage; 
    echo "  ERROR! No genome found.";
    exit 1; 
}
OUTPUTDIR=$(realpath $OUTPUTDIR 2> /dev/null) || {
    usage;
    echo "  ERROR! Invalid output directory.";
    exit 1;
}


#####################################################

quit=false

## dependencies check
dependencies=(mafft blastn samtools awk bedtools CIAlign python3 R)
for dep in ${dependencies[@]}; do
	if command -v $dep > /dev/null 2>&1; then
		true
	else
		echo -e "$dep not found!"
		quit=true
	fi
done

python_dependencies=(Levenshtein)
for py_dep in ${python_dependencies[@]}; do
	if python3 -c "import $py_dep" > /dev/null 2>&1; then
		true
	else
		echo -e "$py_dep not found!"
		quit=true
	fi
done

if $quit; then
    echo quit
    exit 1
fi


#####################################################

# global variables
scriptdir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
prefix=$OUTPUTDIR/`basename $FASTAFILE`

#####################################################

## Make a fasta file with instance of the TE in the genome with the flanking regions
# https://github.com/annaprotasio/TE_ManAnnot/blob/main/bin/make_fasta_from_blast.sh

# look for blast database, if not found, make it
nin_file=$GENOME.nin
if [ ! -f "$nin_file" ]; then
    echo -e "\n\nBlast database for the genome doesn't exist. Running makeblastdb, this can take some time\n\n"
    makeblastdb -in $GENOME -dbtype nucl
    echo -e "\n\n"
fi

# look for genome.fasta.length file, if not found, make it
length_file=$GENOME.length
if [ ! -f "$length_file" ]; then
    echo -e "\n\nFile with genome lengths not found. Making it now, this can take some time"
    samtools faidx $GENOME
    awk '{OFS="\t"; print $1,$2}' < $GENOME.fai > $GENOME.length
	echo -e "\n\n"
fi


#Â if the value 0 is entered as min_length by the user, redifine min_length as half the length of fasta sequence
if [ $MIN_LENGTH == 0 ]; then 
	MIN_LENGTH=`grep -v ">" $FASTAFILE | wc | awk '{print $3/2}'`
fi


function get_blast_hit() {

    echo -e "\n\n"
    echo -e "Query sequence:\t" `basename $2`
    echo -e "Minimum length of blast hit:\t" $5
    echo -e "the hit locus will be extended:\t $6bp in 5' and $7bp in 3'"
    echo -e "\n\n"

    # run blastn
    echo "#qseqid sseqid pident length mismatch qstart qend sstart send sstrand" > $1.blast.o
    blastn -query $2 -db $3 -outfmt "6 qseqid sseqid pident length mismatch qstart qend sstart send sstrand" -evalue $4 | awk -v "ml=$5" '{OFS="\t"; if ($4 > ml) {print $0}}' >> $1.blast.o
    
    # filter blastn results
    awk -v cons_len="$8" '{OFS="\t"; if ($1~/^#/) {} else {if ($3 > 80 && $7-$6<3*cons_len) {print}}}' < $1.blast.o > $1.blast.tmp.o

    # parse blast result into a bed file
    awk '{OFS="\t"; if ($10~/plus/) {print $2, $8, $9, $1, $3, "+"} else {print $2, $9, $8, $1, $3, "-"}}' < $1.blast.tmp.o > $1.blast.bed

    # extend boundaries "flank" bases up and down of the blast hit locations
    bedtools slop -s  -i $1.blast.bed  -g $3.length -l $6 -r $7 > $1.blast.flank.bed

    # extract fasta sequence from the reference genome
    bedtools getfasta -fi  $3 -fo $1.blast.bed.fa  -bed $1.blast.flank.bed -s 

    # how many sequences ended up in the multi fasta 
    fasta_count=`grep -c ">" $1.blast.bed.fa`

    echo "The fasta file with blast hits has "$fasta_count "sequences"

    # remove redundant files
    rm $1.blast.bed $1.blast.flank.bed

}
cons_len=$(awk 'BEGIN {OFS = "\n"}; /^>/ {print(substr(sequence_id, 2)" "sequence_length); sequence_length = 0; sequence_id = $0}; /^[^>]/ {sequence_length += length($0)}; END {print(substr(sequence_id, 2)" "sequence_length)}' $FASTAFILE | awk 'NR > 1 {print $NF}')
if [ $cons_len -lt $FLANK ]; then
    FACTOR=10
fi
FLANK=$(( $FLANK/$FACTOR ))
get_blast_hit $prefix $FASTAFILE $GENOME $EVALUE $MIN_LENGTH $FLANK $FLANK $cons_len
fl=$(Rscript $scriptdir/utils/query_coverage.R $prefix.blast.o $cons_len $OUTPUTDIR/coverage.txt)


#####################################################

## Check for a minimal number of sequences

if [ $(grep -c ">" $prefix.blast.bed.fa) -lt 3 ]; then
    echo -e "\n\tNot enough blast hit to extend/trim the consensus"
    rm $prefix.blast.* &> /dev/null
    exit 0
fi

#####################################################

## if $prefix.blast.flank.bed has to many sequences, it subsamples them
# https://github.com/annaprotasio/TE_ManAnnot/blob/main/bin/ready_for_MSA.sh

function resize_cluster() {
    hits_fasta=$1
    fasta_count=`grep -c ">" $1`

    if [ $fasta_count -gt $2 ]; then
        
        echo -e "\tSumbsampling blast hits"

        largest_number=$(echo "$2 * $3" | bc -l)
        largest_number=${largest_number%.*}
        randomly_selected_number=$(($2 - $largest_number))

        samtools faidx $1 2> $OUTPUTDIR/log

        ## Check if sequence is a potential simple repeats
        if [ -f $OUTPUTDIR/log ] && [[ $(head -1 $OUTPUTDIR/log) == *"Ignoring duplicate sequence"* ]]; then
            echo -e "\n\tThe sequence is hypothetically a simple repeat"
            rm $prefix.blast.* $OUTPUTDIR/log $OUTPUTDIR/new_consensus.fasta &> /dev/null
            cp $FASTAFILE $OUTPUTDIR/simple_repeat.fasta
            exit 0
        fi

        sort -nk 2 -r $1.fai > $1.fai.sortedbylength
        # get $KEEP % of largest sequences
        head -$largest_number $1.fai.sortedbylength | awk '{print $1}' >> $1.headers 
        awk "NR> $largest_number {print}" < $1.fai.sortedbylength > $1.temp 
        # add random hits
        sort -R $hits_fasta.temp | head -$randomly_selected_number | awk '{print $1}' >> $1.headers
        
        grep -A 1 -f $1.headers $1 | sed '/^--/d' > $1.rdmSubset.fa 
        
        rm $1.fai.sortedbylength $1.headers $1.temp $1.fai
        mv $1.rdmSubset.fa $1
    fi
}

resize_cluster $prefix.blast.bed.fa $LIMIT $KEEP

#####################################################

## Alignement 

function run_mafft() {
    echo -e "\tMultiple alignement of sequences using MAFFT"
    mafft --reorder --thread $1 $2 > $2.maf
}

run_mafft $THREADS $prefix.blast.bed.fa


#####################################################

## Cleaning the alignement

function run_cialign() {
    echo -e "\tCleaning the alignement using CIAlign"
    CIAlign --infile $1 --outfile_stem  $2 --remove_insertions --insertion_max_size $3 --crop_ends --make_consensus 
        #--plot_output --plot_format svg

    rm $2_log.txt $2_with_consensus.fasta $2_cleaned.fasta $2_removed.txt
}

run_cialign $prefix.blast.bed.fa.maf $OUTPUTDIR/cialign $INS_MAX_SIZE 


#####################################################

## Some functions

function levenshtein_distance {
    # $1: old consensus
    # $2: new consensus

    seq1=$(grep -v ">" $1)
    seq2=$(grep -v ">" $2)

python3 - << END
import Levenshtein as lv

dist = 1 - lv.ratio(str("$seq1").upper(), str("$seq2").upper())
print(dist)
END
}

function end_excess() {
python3 - << END
with open("$1", "r") as f:
    data = f.readlines()
    bool=$2

    def counter(lst):
        c = 0
        for line in lst:
            val = int(line.replace("\n", ""))
            if val > $3:
                break
            c += 1 
        print(c)

    if bool:
        counter(data)
    else:
        data.reverse()
        counter(data)
END
}

function handle_error() {
    echo -e "\n\nA new consensus is not generated"
    rm $prefix.blast.bed $prefix.blast.flank.bed 2> /dev/null
    rm $prefix.blast.bed.fa.fai.sortedbylength $prefix.blast.bed.fa.headers $prefix.blast.bed.fa.temp $prefix.blast.bed.fa.fai 2> /dev/null
    rm $OUTPUTDIR/cialign*  $OUTPUTDIR/coverage.txt &> /dev/null
    rm $OUTPUTDIR/coverage.txt $prefix.* $prefix.blast* $prefix.new* &> /dev/null
    exit 1
}


#####################################################

## Main loop

cp $FASTAFILE $OUTPUTDIR/old_consensus.fasta
mv $OUTPUTDIR/cialign_consensus.fasta $OUTPUTDIR/new_consensus.fasta

counter=1

while true; do
     
    ## compute distance between two consensi
    dist=$(levenshtein_distance $OUTPUTDIR/old_consensus.fasta $OUTPUTDIR/new_consensus.fasta >&1)

    ## new consensus coverage
    blastn -query $OUTPUTDIR/new_consensus.fasta -db $GENOME -outfmt "6 qseqid sseqid pident length mismatch qstart qend sstart send sstrand" -evalue $EVALUE | awk -v "ml=$MIN_LENGTH" '{OFS="\t"; if ($4 > ml) {print $0}}' >> $prefix.new.blast.o
    new_cons_len=$(awk 'BEGIN {OFS = "\n"}; /^>/ {print(substr(sequence_id, 2)" "sequence_length); sequence_length = 0; sequence_id = $0}; /^[^>]/ {sequence_length += length($0)}; END {print(substr(sequence_id, 2)" "sequence_length)}' $OUTPUTDIR/new_consensus.fasta | awk 'NR > 1 {print $NF}')
    rm $OUTPUTDIR/coverage.txt &> /dev/null
    new_fl=$(Rscript $scriptdir/utils/query_coverage.R $prefix.new.blast.o $new_cons_len $OUTPUTDIR/coverage.txt)
    
    if [ $new_fl -ge $fl ]; then
        fl=$new_fl
        big_flank=true
    else
        big_flank=false
    fi

    ## count number of 0 at the begin et at the end
    excess_5=0
    excess_3=0

    excess_5=$(end_excess $OUTPUTDIR/coverage.txt True $MIN_COVERAGE >&1)
    excess_3=$(end_excess $OUTPUTDIR/coverage.txt False $MIN_COVERAGE >&1)

    if [ $MODE = "fast" ]; then
        if [ $counter -gt 10 ]; then
            echo -e '\tThe maximum number of iterations (10) for the "fast" mode is reached, a new consensus is not generated'
            rm $OUTPUTDIR/old_consensus.fasta $OUTPUTDIR/new_consensus.fasta &> /dev/null
            break
        fi
    elif [ $MODE = "slow" ]; then
        if [ $counter -gt 100 ]; then
            echo -e '\tThe maximum number of iterations (100) for the "slow" mode is reached, a new consensus is not generated'
            rm $OUTPUTDIR/old_consensus.fasta $OUTPUTDIR/new_consensus.fasta &> /dev/null
            break
        fi
    fi

    if (( $(echo "$dist < 0.3" |bc -l) )) && [ $excess_5 -lt 10 ] && [ $excess_3 -lt 10 ]; then
        # consensi are pretty similar
        rm $OUTPUTDIR/old_consensus.fasta &> /dev/null
        break
    else
        mv $OUTPUTDIR/new_consensus.fasta $OUTPUTDIR/old_consensus.fasta
        rm $OUTPUTDIR/seq* $OUTPUTDIR/cialign* &> /dev/null
    fi

    ## trimming
    if [ $excess_5 -ne 0 ] || [ $excess_3 -ne 0 ]; then
        head -1 $OUTPUTDIR/old_consensus.fasta > $OUTPUTDIR/new_consensus.fasta
        seq=$(tail -1 $OUTPUTDIR/old_consensus.fasta)

        if [ $excess_5 -ne 0 ] && [ ${#seq} -gt $excess_5 ]; then
            seq=${seq:excess_5}
        else
            excess_5=0
        fi
        if [ $excess_3 -ne 0 ] && [ ${#seq} -gt $excess_3 ]; then
            seq=${seq::-excess_3}
        else
            excess_3=0
        fi

        echo $seq >> $OUTPUTDIR/new_consensus.fasta
        echo -e "\n\tThe sequence is trimmed of $excess_5 bp in 5' and of $excess_3 in 3'"
    else
        cp $OUTPUTDIR/old_consensus.fasta $OUTPUTDIR/new_consensus.fasta
    fi

    ## extension
    if [ $excess_5 -eq 0 ] || [ $excess_3 -eq 0 ]; then

        left_flank=0
        right_flank=0

        if [ $excess_5 -eq 0 ]; then
            if $big_flank; then
                left_flank=$(( 1500/$FACTOR ))
            else
                left_flank=$(( 750/$FACTOR ))
            fi
        fi
        if [ $excess_3 -eq 0 ]; then
            if $big_flank; then
                right_flank=$(( 1500/$FACTOR ))
            else
                right_flank=$(( 750/$FACTOR ))
            fi
        fi

        get_blast_hit $prefix $OUTPUTDIR/new_consensus.fasta $GENOME $EVALUE $MIN_LENGTH $left_flank $right_flank $cons_len 2> /dev/null || handle_error
        resize_cluster $prefix.blast.bed.fa $LIMIT $KEEP 2> /dev/null || handle_error
        run_mafft $THREADS $prefix.blast.bed.fa 2> /dev/null || handle_error
        run_cialign $prefix.blast.bed.fa.maf $OUTPUTDIR/cialign $INS_MAX_SIZE 2> /dev/null || handle_error

        echo -e "\n\tThe sequence is extended of $left_flank bp in 5' and of $right_flank in 3'"

        mv $OUTPUTDIR/new_consensus.fasta $OUTPUTDIR/old_consensus.fasta
        mv $OUTPUTDIR/cialign_consensus.fasta $OUTPUTDIR/new_consensus.fasta        
        rm $OUTPUTDIR/seq* $OUTPUTDIR/cialign*  $OUTPUTDIR/coverage.txt &> /dev/null
    fi

    counter=$(($counter+1))
done

rm $OUTPUTDIR/coverage.txt $prefix.* $prefix.blast* $prefix.new* &> /dev/null